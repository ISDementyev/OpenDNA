# This script was generated by OpenMM-Setup on 2021-06-21.

from simtk.openmm import *
import simtk.openmm.app as app
from simtk.openmm.app import *
from simtk.unit import *

# Input Files

#pdb = PDBFile('sequence_processed.pdb')
pdb = PDBFile('../lightdock/repStructure.pdb')
forcefield = ForceField('amber10.xml', 'amber10_obc.xml')

# System Configuration

nonbondedMethod = CutoffNonPeriodic
nonbondedCutoff = 2.0*nanometers
#constraints = HBonds
#rigidWater = True
constraintTolerance = 0.000001
hydrogenMass = 1.5*amu

# Integration Options

dt = 0.004*picoseconds
temperature = 300*kelvin
friction = 1.0/picosecond #91 for kinetics

# Simulation Options

steps = 10000
equilibrationSteps = 1000
platform = Platform.getPlatformByName('CPU')
dcdReporter = DCDReporter('trajectory.dcd', 10000)
checkpointReporter = CheckpointReporter('checkpoint.chk', 10000)

# Prepare the Simulation

print('Building system...')
topology = pdb.topology
positions = pdb.positions
system = forcefield.createSystem(topology, nonbondedMethod=nonbondedMethod, hydrogenMass=hydrogenMass)
integrator = LangevinMiddleIntegrator(temperature, friction, dt)
integrator.setConstraintTolerance(constraintTolerance)
simulation = Simulation(topology, system, integrator, platform)
simulation.context.setPositions(positions)

# Minimize and Equilibrate

print('Performing energy minimization...')
simulation.minimizeEnergy()
print('Equilibrating...')
simulation.context.setVelocitiesToTemperature(temperature)
simulation.step(equilibrationSteps)

# Simulate

print('Simulating...')
simulation.reporters.append(dcdReporter)
simulation.reporters.append(checkpointReporter)
simulation.currentStep = 0
simulation.step(steps)